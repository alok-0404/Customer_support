name: Deploy to Production

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # Frontend deployments removed - this is backend repository only
  # Frontend should be deployed from separate repositories

  deploy-backend:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    
    - name: Setup Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '18'
        
    - name: Install dependencies
      run: npm install
      
    - name: Build backend
      run: npm run build
      
    - name: Create deployment package
      run: |
        mkdir -p deployment-package
        cp -r src/ deployment-package/
        cp -r deployment/ deployment-package/
        cp package*.json deployment-package/
        cp ecosystem.config.js deployment-package/
        cp production.env deployment-package/
        tar -czf backend-deployment.tar.gz deployment-package/
    
    - name: Deploy to EC2 via SCP
      env:
        EC2_HOST: ${{ secrets.EC2_HOST }}
        EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
        EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
      run: |
        # Create SSH config
        mkdir -p ~/.ssh
        echo "$EC2_SSH_KEY" > ~/.ssh/ec2_key
        chmod 600 ~/.ssh/ec2_key
        
        # Upload deployment package
        scp -i ~/.ssh/ec2_key -o StrictHostKeyChecking=no backend-deployment.tar.gz $EC2_USERNAME@$EC2_HOST:/tmp/
        
        # Execute deployment commands
        ssh -i ~/.ssh/ec2_key -o StrictHostKeyChecking=no $EC2_USERNAME@$EC2_HOST << 'EOF'
          echo "Starting deployment..."
          cd /home/ec2-user
          
          # Stop existing PM2 processes
          pm2 stop all || true
          
          # Backup existing deployment
          if [ -d "customer-support" ]; then
            mv customer-support customer-support-backup-$(date +%Y%m%d_%H%M%S)
          fi
          
          # Extract new deployment
          tar -xzf /tmp/backend-deployment.tar.gz
          mv deployment-package customer-support
          
          # Install dependencies and start
          cd customer-support
          npm install --production
          pm2 start ecosystem.config.js
          
          # Cleanup
          rm /tmp/backend-deployment.tar.gz
          
          echo "Deployment completed successfully!"
          pm2 status
        EOF
